
local ffi = require 'ffi';
local bit = require 'bit';
local clipboard = require "gamesense/clipboard";
local http = require "gamesense/http" or error("Missing Http library");
local vector = require 'vector' or error("Missing Vector library");
local anti_aim = require 'gamesense/antiaim_funcs' or error("Missing antiaim funcs library");
local base64 = require "gamesense/base64" or error("Missing base64 library");
local c_entity = require("gamesense/entity") or error("Missing Entity library library");
local animations = (function ()local a={data={}}function a:clamp(b,c,d)return math.min(d,math.max(c,b))end;function a:animate(e,f,g)if not self.data[e]then self.data[e]=0 end;g=g or 4;local b=globals.frametime()*g*(f and-1 or 1)self.data[e]=self:clamp(self.data[e]+b,0,1)return self.data[e]end;return a end)()
js_loadstring = panorama.loadstring([[ return { OpenExternalBrowserURL: function(url) { void SteamOverlayAPI.OpenExternalBrowserURL(url) } } ]])()
writefile("login_details.txt", "")
writefile("evade_user.txt", "")
writefile("hwid_management.txt", "")

local new_tbl = {
    hp = 100,
    old_hp = 100,
    hp_status = false,
    miss = 0,
    hit = 0
}


client.set_event_callback("setup_command", function()

    if entity.get_local_player() == nil then return end
    local lp = entity.get_local_player()
    new_tbl.old_hp = entity.get_prop(lp, 'm_iHealth')






end)

--[[

local w, h = client.screen_size()
local alpha = 69
local toggled = false
client.set_event_callback("paint_ui", function()
	if alpha > 0 and toggled then

		alpha = alpha - 0.35
	else
		if not toggled then
			alpha = alpha + 1
			if alpha == 254 then
				toggled = true
			end
			alpha = alpha + 1
		end
	end
	if alpha > 1 then
		renderer.gradient(0,0,w,h,0,0,0,alpha,0,0,0,alpha,false)
	end
end)

]]

tbl = {}
tbl.antiaim = {
    luasensefake = false,
    autocheck = false,
    current = false,
    active = false,
    count = false,
    ready = false,
    timer = 0,
    fs = 0,
    last = 0,
    log = {},
    manual = {
        aa = 0,
        tick = 0,
    },

    exact_pi = 0

}

http.get("https://assets.angio.net/pi1000000.txt", function(s, r)
    if not s or r.status ~= 200 then
        return
    end
    tbl.antiaim.exact_pi = r.body
    
end)


local function incrementLoadCount()
    local count = database.read("evade_stats")
    if count == nil then
        count = 0
    end

    count = count + 1
    database.write("evade_stats", count)

    return count
end
local loadCount = incrementLoadCount()
local ffi = require("ffi")

ffi.cdef([[
  typedef struct _RenderAdapterInfo {
    char __m_pDriverName[512];
    unsigned int __m_VendorID;
    unsigned int __m_DeviceID;
    unsigned int __m_SubSysID;
    unsigned int __m_Revision;
    int __m_nDXSupportLevel;
    int __m_nMinDXSupportLevel;
    int __m_nMaxDXSupportLevel;
    unsigned int __m_nDriverVersionHigh;
    unsigned int __m_nDriverVersionLow;
    int64_t pad_0;
  } RenderAdapterInfo, *PRenderAdapterInfo;
]])

local RenderAdapterInfo_t = ffi.typeof("RenderAdapterInfo")

local native_get_current_adapter = vtable_bind("materialsystem.dll", "VMaterialSystem080", 25, "int(__thiscall*)(void*)")
local native_get_adapter_info = vtable_bind("materialsystem.dll", "VMaterialSystem080", 26, "void(__thiscall*)(void*, int, $*)", RenderAdapterInfo_t)

local function get_current_adapter()
    return native_get_current_adapter()
end

local function get_adapter_info(adapter)
    local info = RenderAdapterInfo_t()
    
    native_get_adapter_info(adapter, info)

    local result = {}
    result.drivername = ffi.string(info.__m_pDriverName)
    result.vendorid = tonumber(info.__m_VendorID)
    result.deviceid = tonumber(info.__m_DeviceID)
    result.subsysid = tonumber(info.__m_SubSysID)
    result.revision = tonumber(info.__m_Revision)
    result.dxsupportlevel = tonumber(info.__m_nDXSupportLevel)
    result.mindxsupportlevel = tonumber(info.__m_nMinDXSupportLevel)
    result.maxdxsupportlevel = tonumber(info.__m_nMaxDXSupportLevel)
    result.driverversionhigh = tonumber(info.__m_nDriverVersionHigh)
    result.driverversionlow = tonumber(info.__m_nDriverVersionLow)

    return json.stringify(

    result.drivername..
    result.vendorid..
    result.deviceid..
    result.subsysid..
    result.revision..
    result.dxsupportlevel..
    result.mindxsupportlevel..
    result.maxdxsupportlevel..
    result.driverversionhigh..
    result.driverversionlow

    )
end

-- Get the current adapter index
local adapter = get_current_adapter()
-- Get the adapter info as a table
local hwid = get_adapter_info(adapter)
-- Print the adapter info in a formatted way






local get_base = {

    encode = base64.encode(hwid, "base64"),
    decode = ""
}

local curr_build = "Source"

local login_details = {
    login = "NULL",
    access = false,
    web_info = "",
    is_visible = false,
    registration_data = get_base.encode,
    is_registered = false,
    bypass_register = false,
    has_access = false
}


if readfile("hwid_management.txt") == get_base.encode then
    login_details.is_registered = true
end


--[[

local decode_button = ui.new_button("AA", "Anti-aimbot angles", "HWID PRINT", function()
    get_base.encode = (base64.encode(hwid, "base64"))
    get_base.decode = (base64.decode(get_base.encode, "base64"))

    client.color_log(255, 255, 255, "Encoded: \n"..get_base.encode.."\n Decoded: \n"..get_base.decode)
end)

]]



local play_data = {

    start_time = globals.curtime(),
    seconds = 0,
    minutes = 0,
    hours = 0,
    hits = 0,
    misses = 0,
    ticks_elapsed = 0
}


client.set_event_callback("console_input", function(text)
    if not string.find(text, "/login") then return end
    local string_len = string.len(text)
    login_details.login = string.sub(text, 8, string_len)
end)

http.get("https://raw.githubusercontent.com/QualetyWeb/qualety.github.io/main/usernames.txt", function(s, r)
    if not s or r.status ~= 200 then
        return
    end
    login_details.web_info = r.body
    
end)









local hb_tbl = {

    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
}

local function get_camera_pos(enemy)
    local e_x, e_y, e_z = entity.get_prop(enemy, "m_vecOrigin")
    if e_x == nil then return end
    local _, _, ofs = entity.get_prop(enemy, "m_vecViewOffset")
    e_z = e_z + (ofs - (entity.get_prop(enemy, "m_flDuckAmount") * 16))
    return e_x, e_y, e_z
end
local function fired_at(target, shooter, shot)
    if entity.get_local_player() == nil then return end
    local lp = entity.get_local_player()
    --new_tbl.old_hp = entity.get_prop(lp, 'm_iHealth')
    local shooter_cam = { get_camera_pos(shooter) }
    if shooter_cam[1] == nil then return end
    
    local player_head = { entity.hitbox_position(target, 0) }
    local hb1 = { entity.hitbox_position(target, 1) }
    local hb2 = { entity.hitbox_position(target, 2) }
    local hb3 = { entity.hitbox_position(target, 3) }
    local hb4 = { entity.hitbox_position(target, 4) }
    local hb5 = { entity.hitbox_position(target, 5) }
    local hb6 = { entity.hitbox_position(target, 6) }
    local hb7 = { entity.hitbox_position(target, 7) }
    local hb8 = { entity.hitbox_position(target, 8) }
    local hb9 = { entity.hitbox_position(target, 11) }
    local hb10 = { entity.hitbox_position(target, 12) }
    local hb11 = { entity.hitbox_position(target, 13) }
    local hb12 = { entity.hitbox_position(target, 14) }
    local hb13 = { entity.hitbox_position(target, 15) }
    local hb14 = { entity.hitbox_position(target, 16) }
    local hb15 = { entity.hitbox_position(target, 17) }
    local hb16 = { entity.hitbox_position(target, 18) }

    local shooter_cam_to_head = { player_head[1] - shooter_cam[1], player_head[2] - shooter_cam[2], player_head[3] - shooter_cam[3] }
    local shooter_cam_to_shot = { shot[1] - shooter_cam[1], shot[2] - shooter_cam[2],shot[3] - shooter_cam[3]}
    local magic = ((shooter_cam_to_head[1]*shooter_cam_to_shot[1]) + (shooter_cam_to_head[2]*shooter_cam_to_shot[2]) + (shooter_cam_to_head[3]*shooter_cam_to_shot[3])) / (math.pow(shooter_cam_to_shot[1], 2) + math.pow(shooter_cam_to_shot[2], 2) + math.pow(shooter_cam_to_shot[3], 2))
    local closest = { shooter_cam[1] + shooter_cam_to_shot[1]*magic, shooter_cam[2] + shooter_cam_to_shot[2]*magic, shooter_cam[3] + shooter_cam_to_shot[3]*magic}
    local length = math.abs(math.sqrt(math.pow((player_head[1]-closest[1]), 2) + math.pow((player_head[2]-closest[2]), 2) + math.pow((player_head[3]-closest[3]), 2)))
    local frac_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], player_head[1], player_head[2], player_head[3])
    local hb_tbl2 = {

        hb1_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb1[1], hb1[2], hb1[3]),
        hb2_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb2[1], hb2[2], hb2[3]),
        hb3_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb3[1], hb3[2], hb3[3]),
        hb4_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb4[1], hb4[2], hb4[3]),
        hb5_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb5[1], hb5[2], hb5[3]),
        hb6_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb6[1], hb6[2], hb6[3]),
        hb7_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb7[1], hb7[2], hb7[3]),
        hb8_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb8[1], hb8[2], hb8[3]),
        hb9_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb9[1], hb9[2], hb9[3]),
        hb10_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb10[1], hb10[2], hb10[3]),
        hb11_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb11[1], hb11[2], hb11[3]),
        hb12_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb12[1], hb12[2], hb12[3]),
        hb13_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb13[1], hb13[2], hb13[3]),
        hb14_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb14[1], hb14[2], hb14[3]),
        hb15_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb15[1], hb15[2], hb15[3]),
        hb16_shot = client.trace_line(shooter, shot[1], shot[2], shot[3], hb16[1], hb16[2], hb16[3])

    }

    local hb_string = (
    math.ceil(hb_tbl2.hb1_shot).." | "..
    math.ceil(hb_tbl2.hb2_shot).." | "..
    math.ceil(hb_tbl2.hb3_shot).." | "..
    math.ceil(hb_tbl2.hb4_shot).." | "..
    math.ceil(hb_tbl2.hb5_shot).." | "..
    math.ceil(hb_tbl2.hb6_shot).." | "..
    math.ceil(hb_tbl2.hb7_shot).." | "..
    math.ceil(hb_tbl2.hb8_shot).." | "..
    math.ceil(hb_tbl2.hb9_shot).." | "..
    math.ceil(hb_tbl2.hb10_shot).." | "..
    math.ceil(hb_tbl2.hb11_shot).." | "..
    math.ceil(hb_tbl2.hb12_shot).." | "..
    math.ceil(hb_tbl2.hb13_shot).." | "..
    math.ceil(hb_tbl2.hb14_shot).." | "..
    math.ceil(hb_tbl2.hb15_shot).." | "..
    math.ceil(hb_tbl2.hb16_shot).." |")


    local frac_final = client.trace_line(target, closest[1], closest[2], closest[3], player_head[1], player_head[2], player_head[3])


    if hb_string ~= "1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |" then
        new_tbl.hp_status = true
    else
        new_tbl.hp_status = false
    end


   --print(hb1_shot)
    return (length < 69) and (frac_shot > 0.99 or frac_final > 0.99)


end
local tickshot = 0











-- PREDICT DEBUGGING
require( "vector3" )
local get_prop         		= entity.get_prop
local ui_get           		= ui.get
local get_local_player 		= entity.get_local_player
local get_all_players  		= entity.get_players
local get_player_weapon  	= entity.get_player_weapon
local entity_is_enemy  		= entity.is_enemy
local entity_is_alive  		= entity.is_alive
local entity_is_dormant 	= entity.is_dormant
local math_atan2 	   		= math.atan2
local math_deg 	   	   		= math.deg
local math_sqrt		   		= math.sqrt


local v_left, v_right = Vector3(0, 0, 0), Vector3(0, 0, 0)
local l_dmg, r_dmg, c_dmg = 0, 0, 0

local o_scan_fineness = 20
local o_scan_length = 130
--DEBUG END;
ffi.cdef[[
    void* __stdcall URLDownloadToFileA(void* LPUNKNOWN, const char* LPCSTR, const char* LPCSTR2, int a, int LPBINDSTATUSCALLBACK);
    bool DeleteUrlCacheEntryA(const char* lpszUrlName);

]]


local js = panorama.open()
local _ENV = getfenv(); do
    local libs = {
        { "csgo_weapons",   "18807" },
        { "http",           "19253" },
        { "trace",          "32949" },
    }
    for _, lib in ipairs(libs) do
        local success, loaded_lib = pcall(require, (lib[2] and "gamesense/" or "lib/") .. lib[1])
        if success then
            _ENV[lib[1]] = loaded_lib
        else
            if lib[2] then
                js.SteamOverlayAPI.OpenExternalBrowserURL("https://gamesense.pub/forums/viewtopic.php?id=" .. lib[2])
            else
                error("Failed to load module: lib/" .. lib[1] .. " | Local library not found in lib folder", 2)
            end
        end
    end
end
local antiaim = {}
local menu = {
    ragebot_toggle = ui.reference("RAGE", "Aimbot", "Enabled");
    enabled = ui.reference("AA", "Anti-aimbot angles", "Enabled");                                  -- [1]  Enable AA                           [29]
    pitch = {ui.reference("AA", "Anti-aimbot angles", "Pitch")};                                    -- [2]  Pitch                               [30]
    yaw_base = ui.reference("AA", "Anti-aimbot angles", "Yaw base");                                -- [3]  Yaw Base                            [31]
    yaw = { ui.reference("AA", "Anti-aimbot angles", "Yaw") },                                      -- [4]  Yaw --> drop[1], slider[2]          [32]
    yaw_jitter = { ui.reference("AA", "Anti-aimbot angles", "Yaw jitter") };                        -- [5]  Yaw Jitter                          [33]
    body_yaw = { ui.reference("AA", "Anti-aimbot angles", "Body yaw") };                            -- [6]  Body Yaw                            [34]
    freestanding_body_yaw = ui.reference("AA", "Anti-aimbot angles", "Freestanding body yaw");      -- [7]  Freestanding Body Yaw               [35]
    edge_yaw = ui.reference("AA", "Anti-aimbot angles", "Edge yaw");                                -- [8]  Edge Yaw                            [36] 
    freestand = { ui.reference("AA", "Anti-aimbot angles", "Freestanding") },                       -- [9]  Freestanding --> Ref[1], Key[2]     [37]
	roll = ui.reference("AA", "Anti-aimbot angles", "Roll");                                        -- [10] Roll                                [38]
    legmovement = ui.reference("AA", "Other", "Leg movement");                                      -- [11] Leg Movement                        [39]
    fakepeek = { ui.reference("AA", "Other", "Fake peek") },                                        -- [12] Fake Peek                           [40]
    slowmotion = { ui.reference("AA", "Other", "Slow motion") },                                    -- [13] Slow Motion                         [41]
    onshot = { ui.reference("AA", "Other", "On shot anti-aim") },                                   -- [14] OSAA / Hideshots                    [42]
    doubletap = { ui.reference("RAGE", "Aimbot", "Double tap") },                                   -- [15] Double Tap                          [43]
    fakeduck = ui.reference("RAGE", "Other", "Duck peek assist");                                   -- [16] Fake Duck                           [44]
    auto_peek = { ui.reference("Rage", "Other", "Quick peek assist") },                             -- [17] Auto Peek                           [45]
    pingspike = { ui.reference("MISC", "Miscellaneous", "Ping Spike") },                            -- [18] Ping Spike                          [46]
    fakelag = ui.reference("AA", "Fake lag", "Enabled");                                            -- [19] Fakelag Switch                      [47]
    fakelag_limit = ui.reference("AA", "Fake lag", "Limit");                                        -- [20] Fakelag Limit                       [48]
    force_body = ui.reference("RAGE", "Aimbot", "Force body aim");                                  -- [21] Force Baim                          [49]
    force_safe = ui.reference("RAGE", "Aimbot", "Force safe point");                                -- [22] Force Safepoint                     [50]
    menu_color = { ui.reference("MISC", "Settings", "Menu color") };                                -- [23] Menu Color                          [51]
    clantag = ui.reference("MISC", "Miscellaneous", "Clan tag spammer");                            -- [24] Clantag Spammer                     [52]
    damage_bind = { ui.reference('RAGE', 'Aimbot', 'Minimum damage override') };                    -- [25] Minimum Damage Override             [53]
}



client.set_event_callback("shutdown", function()
    ui.set_visible(menu.fakepeek[1], true)
    ui.set_visible(menu.fakepeek[2], true)
    ui.set_visible(menu.legmovement, true)
    ui.set_visible(menu.slowmotion[1], true)
    ui.set_visible(menu.slowmotion[2], true)
    ui.set_visible(menu.onshot[1], true)
    ui.set_visible(menu.onshot[2], true)
    ui.set_visible(menu.enabled, true)
    ui.set_visible(menu.pitch[1], true)
    ui.set_visible(menu.pitch[2], true)
    ui.set_visible(menu.yaw_base, true)
    ui.set_visible(menu.yaw[1], true)
    ui.set_visible(menu.yaw[2], true)
    ui.set_visible(menu.yaw_jitter[1], true)
    ui.set_visible(menu.yaw_jitter[2], true)
    ui.set_visible(menu.body_yaw[1], true)
    ui.set_visible(menu.body_yaw[2], true)
    ui.set_visible(menu.freestanding_body_yaw, true)
    ui.set_visible(menu.edge_yaw, true)
    ui.set_visible(menu.freestand[1], true)
    ui.set_visible(menu.freestand[2], true)
    ui.set_visible(menu.roll, true)
    ui.set_visible(menu.legmovement, true)

end)


local lp = entity.get_local_player()

states = {
	[1] = "Global",
    [2] = "Standing",
    [3] = "Running",
    [4] = "Slow Motion",
	[5] = "Air",
    [6] = "Air-Duck",
    [7] = "Duck"
}
local aa_tabs = ui.new_combobox("AA", "Anti-aimbot angles", "Tabs", {"Anti-Aimbot", "Extra"})
local aa_type = ui.new_combobox("AA", "Anti-aimbot angles", "Anti-Aim Type", {"None", "Presets", "Builder"})






local lua = {

    home = {
        label1 = ui.new_label("AA", "Other", " \n"),
        manager = ui.new_combobox("AA", "Other", "  \aBBC0F3FF➤ \aE8E8E8FFTab Manager", {"\aBBC0F3FF❓ \aE8E8E8FFInfo", "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot", "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA", "\aBBC0F3FF✎ \aE8E8E8FFVisuals", "\aBBC0F3FF⚙️ \aE8E8E8FFConfig System"}),
        
        spacer1 = ui.new_label("AA", "Other", " \n"),
        label2 = ui.new_label("AA", "Other", "ㅤ\aBBC0F3FF- \aB3B7DDE2User: \aE8E8E8FF".."unknown"),
        label3 = ui.new_label("AA", "Other", "ㅤ\aBBC0F3FF- \aB3B7DDE2Build: \aE8E8E8FF"..string.lower(curr_build)),
        
        spacer2 = ui.new_label("AA", "Other", " \n"),


        label4 = ui.new_label("AA", "Other", "ㅤTime Elapsed:"),
        hours = ui.new_label("AA", "Other", "\aBBC0F3FF"..""),
        minutes = ui.new_label("AA", "Other", "\aBBC0F3FF"..""),
        seconds = ui.new_label("AA", "Other", "\aBBC0F3FF"..""),
        spacer3 = ui.new_label("AA", "Other", " \n"),
        fs = ui.new_checkbox("AA", "Other", "\aBBC0F3FFFreestanding", {"Default"}),
        fs_key = ui.new_hotkey("AA", "Other", "\nFreestanding Bind", true),
        osaa = ui.new_checkbox("AA", "Other", "\aBBC0F3FFOn shot anti-aim", {"Default"}),
        osaa_key = ui.new_hotkey("AA", "Other", "\nOSAA BIND", true),
    },

    info = {
        label1 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFInformation"),
        label2 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label3 = ui.new_label("AA", "Anti-aimbot angles", "Welcome \aBBC0F3FF".."[Player]".." \aE8E8E8FFto Evade \aA8A8A8EE[\aFFFFFFFFgame\aB7D658FFsense\aA8A8A8EE] \n "),
        label4 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label5 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF- \aE8E8E8FFLast Update: [\aBBC0F3FF20 / 09 / 2023\aE8E8E8FF]"),
        label6 = ui.new_label("AA", "Anti-aimbot angles", "ㅤ\aBBC0F3FF- \aF8F8F8FFUpdate Log: "),
        label7 = ui.new_label("AA", "Anti-aimbot angles", "ㅤㅤ- \aC8C8C8CCAdded Tab Manager"),
        label8 = ui.new_label("AA", "Anti-aimbot angles", "ㅤㅤ- \aC8C8C8CCFixed Icons"),
        label9 = ui.new_label("AA", "Anti-aimbot angles", "ㅤㅤ- \aC8C8C8CCFixed Colors"),  
        label10 = ui.new_label("AA", "Anti-aimbot angles", " \n "),  
        get_discord = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFEvade Discord", function() js_loadstring.OpenExternalBrowserURL("https://discord.gg/8g2WmefEAK") end),
    
        reset_login = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFReset Login Memory", function ()

            writefile("login_details.txt", "NULL")
        
        end),
        spacer1 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        statistics = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFStatistics"),
        spacer2 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        times_loaded = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Loaded: ".."0"),
        hits = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Loaded: ".."0"),
        misses = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Loaded: ".."0"),
        accuracy = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Loaded: ".."0"),
        times_hit = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Hit"),
        times_missed = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFTimes Missed"),

    },

    preset = {

        label1 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFPresets"),
        spacer1 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        pre_type = ui.new_combobox("AA", "Anti-aimbot angles", "\n", {"Off", "Meta Jitter", "Delayed", "Evade Special"}),
    },

    def = {

        toggle = ui.new_checkbox("AA", "Anti-aimbot angles", "\aE8E8E8FFOverride \aBBC0F3FFDefensive \aE8E8E8FFAnti-aimbot"),
        spacer1 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        def_conds = ui.new_multiselect("AA", "Anti-aimbot angles", "Conditions", {"Standing", "Air-Duck", "Air", "Running", "Duck", "Predict Visible", "Visible", "On Shot", "When Landing", "Unduck"}),

        ignore_fs = ui.new_checkbox("AA", "Anti-aimbot angles", "Ignore freestanding"),
        spacer2 = ui.new_label("AA", "Anti-aimbot angles", " \n "),

        override_def = ui.new_multiselect("AA", "Anti-aimbot angles", "Override Anti-aim", {"Override Yaw", "Override Pitch"}),

        label1 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFYaw"),
        spacer3 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        yaw_type = ui.new_combobox("AA", "Anti-aimbot angles", "Yaw Types", {"Static", "Jitter", "Slow Jitter", "Spin", "Breaker"}),
        yaw = ui.new_slider("AA", "Anti-aimbot angles", "Base Yaw", -100, 100, 0),
        radius = ui.new_slider("AA", "Anti-aimbot angles", "Radius", -50, 50, 0),
        delay = ui.new_slider("AA", "Anti-aimbot angles", "Speed / Delay", 1, 10, 1),
        spin_radius = ui.new_slider("AA", "Anti-aimbot angles", "Radius", 0, 360, 0, true, "°"),
        spin_direction = ui.new_slider("AA", "Anti-aimbot angles", "Direction", 1, 2, 1, true, "*", 1, {[1] = "Left", [2] = "Right"}),
        breaker_sequence = ui.new_combobox("AA", "Anti-aimbot angles", "Sequence Type", {"1 <-> 3", "1 >-< 3", "Unpure"}),
        breaker_statement1 = ui.new_slider("AA", "Anti-aimbot angles", "Statement #1", -30, 30, 0, true, "", 1, {[0] = "Invalid"}),
        breaker_statement2 = ui.new_slider("AA", "Anti-aimbot angles", "Statement #2 (Δ)", -10, 10, 0, true, "Δ", 1, {[0] = "Invalid"}),


        spacer3 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFPitch"),
        spacer4 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        flick_type = ui.new_combobox("AA", "Anti-aimbot angles", "Pitch Type", {"Evade", "Custom"}),
        variation = ui.new_slider("AA", "Anti-aimbot angles", "Variation", 0, 50, 0, true, "°"),
        flick_rate = ui.new_slider("AA", "Anti-aimbot angles", "Flick Rate", 0, 50, 0),
        start_degree = ui.new_slider("AA", "Anti-aimbot angles", "Base Angle", 1, 3, 1, true, "*", 1, {[1] = "Down", [2] = "Zero", [3] = "Up"}),
        trigger_pitch = ui.new_slider("AA", "Anti-aimbot angles", "Trigger Angle", 1, 3, 1, true, "*", 1, {[1] = "Down", [2] = "Zero", [3] = "Up"}),
        unpred_flick = ui.new_checkbox("AA", "Anti-aimbot angles", "Unpredictive Flicks"),

        spacer5 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label3 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFLag Switch"),
        spacer6 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        pause_time = ui.new_slider("AA", "Anti-aimbot angles", "Pause", 0, 100, 0, true, "t", 1, {[0] = "Disabled"}),
    },


    visuals = {
        toggle = ui.new_checkbox("AA", "Anti-aimbot angles", "Enable Visuals"),

        spacer1 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label1 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFCrosshair Indicators"),
        spacer2 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        colpick1 = ui.new_color_picker("AA", "Anti-aimbot angles", "LOL", 255, 255, 255, 255),
        crosshair = ui.new_combobox("AA", "Anti-aimbot angles", "\n", {"-", "Basic", "Modern", "New"}),

        spacer3 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFOther Indicators"),
        spacer4 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        colpick2 = ui.new_color_picker("AA", "Anti-aimbot angles", "LOL", 255, 255, 255, 255),
        other = ui.new_multiselect("AA", "Anti-aimbot angles", "\n", {"Bomb Timer", "Defensive", "Low Ammo", "Velocity", "Debug Panel"}),

        spacer5 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label3 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFLogs"),
        spacer6 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        colpick3 = ui.new_color_picker("AA", "Anti-aimbot angles", "LOL", 199, 193, 255, 255),
        logs = ui.new_multiselect("AA", "Anti-aimbot angles", "\n", {"Hit", "Miss", "Console Hit", "Console Miss", "Enemy Shots"}),
    }
}

local notify = (function()
    local b = vector;
    local c = function(d, b, c)
        return d + (b - d) * c 
    end;
    local e = function()
        return b(client.screen_size())
    end;
    local f = function(d,...)
        local c = {...}
        local c = table.concat(c, "")
        return b(renderer.measure_text(d, c))
    end;
    
    local g = {
        notifications = {bottom = {}},
        max = {bottom = 6}
    }

    g.__index = g;
    g.new_bottom = function(h, i, j, ...)
        table.insert(
            g.notifications.bottom, 
            {started=false, 
            instance = setmetatable({active = false, timeout = 4, color = {["r"] = h, ["g"] = i, ["b"] = j, a = 0},x = e().x / 2, y = e().y, text = ...}, g)
            }
        )
    end;
        
        
    function g:handler()
        local d = 0;
        local b = 0;
        for d, b in pairs(g.notifications.bottom) do 
            if not b.instance.active and b.started then 
                table.remove(g.notifications.bottom,d)
            end
        end;
        
        for d = 1, #g.notifications.bottom do
            if g.notifications.bottom[d].instance.active then 
                b = b + 1 
            end
        end;
        
        for c, e in pairs(g.notifications.bottom) do 
            if c > g.max.bottom then 
                return 
            end;
            if e.instance.active then
                e.instance:render_bottom(d, b)
                d = d + 1 
            end;

            if not e.started then 
                e.instance:start()
                e.started = true 
            end 
        end 
    end;
    
    function g:start()
        self.active = true;
        self.delay = globals.realtime() + self.timeout
    end;
    
    function g:get_text()
        local d = ""
        local the_col = { ui.get(lua.visuals.colpick3) }
        for b, b in pairs(self.text) do 
            local c = f("",b[1])
            local c, e, f = 255, 255, 255;
            if b[2] then
                c, e, f = the_col[1] ,the_col[2] ,the_col[3] 
            end;

            d = d..("\a%02x%02x%02x%02x%s"):format(c,e,f,self.color.a,b[1])
        end;
        
        return d 
    end;
    
    local k = (function()
        local d = {}
        d.rec = function(d,b,c,e,f,g,k,l,m)
            m = math.min(d / 2, b / 2, m)
            renderer.rectangle(d, b + m, c, e - m * 2, f, g, k, l)
            renderer.rectangle(d + m, b, c - m * 2, m, f, g, k, l)
            renderer.rectangle(d + m, b + e - m, c - m * 2, m, f, g, k, l)
            renderer.circle(d + m, b + m, f, g, k, l, m, 180, .25)
            renderer.circle(d - m + c, b + m, f, g, k, l, m, 90, .25)
            renderer.circle(d - m + c, b - m + e, f, g, k, l, m, 0, .25)
            renderer.circle(d + m, b - m + e, f, g, k, l, m, -90, .25)
        end;
            
        d.rec_outline = function(d, b, c, e, f, g, k, l, m, n)

            --[[

            d --> "X cordinates"
            b --> "Y cordinates"
            c --> "Width"



            ]]

            m = math.min(c / 2, e / 2, m)
            if m == 1 then
                renderer.rectangle(d, b, c, n, f, g, k, l)
                renderer.rectangle(d, b + e - n, c, n, f, g, k, l)
            else 
                renderer.rectangle(d + m, b, c - m * 2, n, f, g, k, l)
                renderer.rectangle(d + m, b + e - n, c - m * 2, n, f, g, k, l)
                renderer.rectangle(d, b + m, n, e - m * 2, f, g, k, l)
                renderer.rectangle(d + c - n, b + m, n, e - m * 2, f, g, k, l)
                renderer.circle_outline(d + m, b + m, f, g, k, l, m, 180, .25, n)
                renderer.circle_outline(d + m, b + e - m, f, g, k, l, m, 90, .25, n)
                renderer.circle_outline(d + c - m, b + m, f, g, k, l, m, -90, .25, n)
                renderer.circle_outline(d + c - m, b + e - m, f, g, k, l, m, 0, .25, n)
            end
        end;
        
        d.glow_module_notify = function(b, c, e, f, g, k, l, m, n, o, p, q, r, s, s)
            local t = 1;
            local u = 1;
            if s then 
                d.rec(b + 19, c + 1, e - 15, f - 1, l, m, n, o, k)
            end;
            
            for l = 0, g do
                local m = o / 2 * (l / g)^3;
                d.rec_outline(b + (l - g - u) * t + 19, c + (l - g - u) * t + 1, e - (l - g - u) * t * 2 - 15, f - (l - g - u) * t * 2 - 1, p , q, r, m / 1.5, k + t * (g - l + u), t)
            end 
        end;
        return d 
    end)
    
    
    ()function g:render_bottom(g,l)
        the_col = { ui.get(lua.visuals.colpick3) }
        local e = e()
        local m = 6;
        local n = "     "..self:get_text()
        local f = f("", n)
        local o = 8;
        local p = 5;
        local q = 0 + m + f.x;
        local q, r = q + p * 2, 12 + 10 + 1;
        local s, t = self.x - q / 2, math.ceil(self.y - 40 + .4)
        local u = globals.frametime() * 0.9
        if globals.realtime() < self.delay then
            self.y = c(self.y, e.y - 45 - (l - g) * r * 1.4, u * 7)
            self.color.a = c(self.color.a, 255, u * 2)
        else
            self.y = c(self.y, self.y - 10, u * 15)
            self.color.a = c(self.color.a, 0, u * 20)
            if self.color.a <= 1 then
                self.active=false 
            end 
        end;
        local h, i, j, l = self.color.r, self.color.g, self.color.b, self.color.a;


        k.glow_module_notify(s, t, q, r, 15, o, 25, 25, 25, l, the_col[1], the_col[2], the_col[3], l, true)
        k.glow_module_notify(s - (s * 0.039), t, q - (q - 40), r, 15, o, 25, 25, 25, l, the_col[1], the_col[2], the_col[3], l, true)
        
        local k = p + 2;
        k = k + 0 + m;
        renderer.text(s - (s * 0.0064), t + r / 2 - f.y / 2, the_col[1], the_col[2], the_col[3], l, "b", nil, "E")
        renderer.text(s + k, t + r / 2 - f.y / 2, 255, 255, 255, l, "", nil, n)
    end;
    
    client.set_event_callback("paint_ui",function()
        g:handler()
    end)
    return g
    
end)()



local login_menu = {

    no_access_msg1 = ui.new_label("AA", "Anti-aimbot angles", "You're not logged in!"),
    login_spacer = ui.new_label("AA", "Anti-aimbot angles", " "),
    user_label = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFUsername"),
    enter_user = ui.new_textbox("AA", "Anti-aimbot angles", "Username"),
    pass_label = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFPassword"),
    enter_pass = ui.new_textbox("AA", "Anti-aimbot angles", "Password"),


    -- Registration

    no_register_label = ui.new_label("AA", "Anti-aimbot angles", "You have not yet registered!"),
    register_spacer1 = ui.new_label("AA", "Anti-aimbot angles", " "),
    user_label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFUsername"),
    enter_user2 = ui.new_textbox("AA", "Anti-aimbot angles", "Username"),
    pass_label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFPassword"),
    enter_pass2 = ui.new_textbox("AA", "Anti-aimbot angles", "Password"),
    key_label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FFRegistration Key"),
    key_pass2 = ui.new_textbox("AA", "Anti-aimbot angles", "Registration Key"),
    



}


local import_key = ui.new_button("AA", "Anti-aimbot angles", "^ Import From Clipboard ^", function() 
    get_clipboard = clipboard.get()
    ui.set(login_menu.key_pass2, tostring(get_clipboard))
end)
local register_spacer2 = ui.new_label("AA", "Anti-aimbot angles", " ")



local double_check_register = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFRegister", function ()

login_details.is_visible = true
end)

local confirm_register = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFRegister (Confirm)", function ()
    get_base.encode = (base64.encode(hwid, "base64"))


    registration_string = (ui.get(login_menu.enter_user2).." "..ui.get(login_menu.enter_pass2))
    local tostring_login = (ui.get(login_menu.enter_user2)..ui.get(login_menu.enter_pass2))..ui.get(login_menu.key_pass2) 
    get_login = registration_string == "" and "NULL" or registration_string == " " and "NULL" or registration_string == "  " and "NULL" or registration_string
    if 
    --string.find(tostring_login, "") or 
    string.find(tostring_login, " ") or 
    string.find(tostring_login, "  ") or 
    string.find(tostring_login, "   ") or 
    string.find(tostring_login, "    ") or 
    string.find(tostring_login, "     ") or
    ui.get(login_menu.enter_user2) == "" or 
    ui.get(login_menu.enter_pass2) == "" or 
    ui.get(login_menu.key_pass2) == ""
    then
        get_login = "NULL"
    end
    if string.find(login_details.web_info, get_login) and string.find(login_details.web_info, ui.get(login_menu.key_pass2)) then
        login_details.is_registered = true
        client.color_log(235, 220, 255, "You've successfully registered an Evade account!")
        writefile("hwid_management.txt", get_base.encode)
        notify.new_bottom(255, 255, 255,{ {"Your account has been \a989CBFFFsuccessfully\aFFFFFFFF created"} })

    else
        if registration_string == "" or registration_string == " " or registration_string == "  " then
            login_details.is_registered = false
            client.color_log(255, 180, 180, "Insufficient Credentials")
            notify.new_bottom(255, 255, 255, {{"\aF3696BFFFailed\aFFFFFFFF to create account"}})
        else
            login_details.is_registered = false
            client.color_log(255, 180, 180, "Incorrect Username Or Password!")
            notify.new_bottom(255, 255, 255, {{"\aF3696BFFFailed\aFFFFFFFF to create account"}})
        end
    end



end)




deny_register = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFRegister (Cancel)", function ()

login_details.is_visible = false
end)

local login_button = ui.new_button("AA", "Anti-aimbot angles", "\aBBC0F3FFLoad", function ()
    get_log_vals = (ui.get(login_menu.enter_user).." "..ui.get(login_menu.enter_pass))
    get_login = get_log_vals == "" and "NULL" or get_log_vals == " " and "NULL" or get_log_vals == "  " and "NULL" or get_log_vals



    if string.find(login_details.web_info, get_login) then
        login_details.access = true
        client.color_log(235, 220, 255, "Successfully Loaded Evade!")
        writefile("login_details.txt", get_login)
        writefile("evade_user.txt", ui.get(login_menu.enter_user))
        notify.new_bottom(255, 255, 255,{ {"Successfully logged in as: "}, {tostring(readfile("evade_user.txt")), true}})
    else
        if get_log_vals == "" or get_log_vals == " " or get_log_vals == "  " then
            login_details.access = false
            client.color_log(255, 180, 180, "Insufficient Credentials")
            notify.new_bottom(255, 255, 255, {{"Insufficient Credentials"}})
        else
            login_details.access = false
            client.color_log(255, 180, 180, "Incorrect Username Or Password!")
            notify.new_bottom(255, 255, 255, {{"Incorrect Username Or Password"}})
        end
    end
end)


local function getcombo(table, value)
	if table == nil then
		return false;
	end

    table = ui.get(table);
    for i=0, #table do
        if table[i] == value then
            return true;
        end
    end

    return false
end


local func = {

    _2hex = function(redArg, greenArg, blueArg, alphaArg)
        return string.format('%.2x%.2x%.2x%.2x', redArg, greenArg, blueArg, alphaArg)
    end,

    _isDT = function ()
        return anti_aim.get_double_tap()
    end,

    _dsy = function ()
        return anti_aim.get_desync(1)
    end,

    _delta = function ()
        local localplayer = entity.get_local_player()
        if not localplayer then
            return ""
        end
        return entity.get_prop(localplayer, "m_flPoseParameter", 11) * 120 - 60
    end,

    _ground = function ()
        local localplayer = entity.get_local_player();
        local flags = entity.get_prop(localplayer, 'm_fFlags');
    end,

    normalize = function(angle)
        angle =  angle % 359.9 
        angle = (angle + 359.9) % 359.9
        if (angle >= 180)  then
            angle = angle - 360
        end
        return angle
    end,



    delayed_jitter = function(self, cmd, data)
        local delay = {math.random(1, math.random(3, 4)), 2, 4, 5}
        local delayed = true

        if globals.chokedcommands() == 0 and aa_table.cycle == delay[lua.def.delay] then
            delayed = false
            self.side = self.side == 1 and 0 or 1
        end



        return (side == 2) and 0 or (side == 1 and 90 or -90)
    end,
    

}












client.set_event_callback("bullet_impact", function(event)
    if entity.get_local_player() == nil then return end
    local enemy = client.userid_to_entindex(event.userid)
    local lp = entity.get_local_player()
    local lp_hp = entity.get_prop(lp, 'm_iHealth')
    if enemy == entity.get_local_player() or not entity.is_enemy(enemy) or not entity.is_alive(lp) then return nil end
    if fired_at(lp, enemy, {event.x, event.y, event.z}) then
        if tickshot ~= globals.tickcount() then
            if not getcombo(lua.visuals.logs, "Enemy Shots") then return end
           -- print(".\nFirst hp: "..new_tbl.hp.."\nSecond hp: "..lp_hp)
            if new_tbl.hp_status == true then
                notify.new_bottom(255, 255, 255,{{"Player "}, {entity.get_player_name(enemy), true}, {" hit you"}})
                new_tbl.hit = new_tbl.hit + 1
            else
                notify.new_bottom(255, 255, 255,{{"Player "}, {entity.get_player_name(enemy), true}, {" missed you"}})
                new_tbl.miss = new_tbl.miss + 1
            end

            tickshot = globals.tickcount()
            tbl.antiaim.count = true
            tbl.antiaim.timer = 0
            if tbl.antiaim.active and tbl.antiaim.log[enemy] == nil then
                tbl.antiaim.log[enemy] = not tbl.antiaim.current
            else
                tbl.antiaim.log[enemy] = not tbl.antiaim.log[enemy]
            end
        end
    end
end)


local setup_timer = 0
local hitgroup_names = { "generic", "head", "chest", "stomach", "left arm", "right arm", "left leg", "right leg", "neck", "?", "gear" }

client.set_event_callback("aim_hit", function(e)
    play_data.hits = play_data.hits + 1
end)

client.set_event_callback("aim_miss", function(e)
    play_data.misses = play_data.misses + 1
end)

local elogs = {} do
    local shot_data = {}


    function elogs.aim_fire(e)
        


        shot_data[e.id] = {
            player = entity.get_player_name(e.target),
            wanted_hitgroup = hitgroup_names[e.hitgroup + 1] or "?",
            wanted_damage = e.damage,
            hit_chance = math.floor(e.hit_chance + 0.5),
            backtrack = globals.tickcount() - e.tick,
            tick = e.tick,
            taser = entity.get_classname(entity.get_player_weapon(entity.get_local_player())) == "CWeaponTaser"
        }
    end


    function elogs.aim_hit(e)
        col_logs = { ui.get(lua.visuals.colpick3) }

        col2hex = func._2hex(col_logs[1], col_logs[2], col_logs[3], col_logs[4])

        log_colors = {
            main = "\a"..col2hex,
            white = "\aFFFFFF"
        }

        
        local hitgroup = hitgroup_names[e.hitgroup + 1] or "?"
        local damage = e.damage
        local fired_shot = shot_data[e.id]
        if getcombo(lua.visuals.logs, "Console Hit") then
            print(string.format(
                "Hit %s\'s %s for %s (history: %s)",
                fired_shot.player, hitgroup, damage, fired_shot.backtrack

            ))
        end
        if getcombo(lua.visuals.logs, "Hit") then
            local hitstring = string.format(
                "Hit %s\'s %s for %s (history: %s)",
                fired_shot.player, hitgroup, damage, fired_shot.backtrack

            )

            notify.new_bottom(255, 255, 255, { { hitstring } })
        end

    end


    function elogs.aim_miss(e)

        local hitgroup = hitgroup_names[e.hitgroup + 1] or "?"
        local damage = e.damage
        local fired_shot = shot_data[e.id]
        if getcombo(lua.visuals.logs, "Console Miss") then
            print(string.format(
                "Missed %s\'s %s due to %s (history %s)",
                fired_shot.player, hitgroup, e.reason, fired_shot.backtrack

            ))
        end
        if getcombo(lua.visuals.logs, "Miss") then
            local hitstring = string.format(
                "Missed %s\'s %s due to %s (history %s)",
                fired_shot.player, hitgroup, e.reason, fired_shot.backtrack

            )

            notify.new_bottom(255, 255, 255, { { hitstring } })
        end

    end


end




ui.set_callback(lua.visuals.logs, function ()
    local update_callback = client.set_event_callback
    update_callback("aim_fire", elogs.aim_fire)
    update_callback("aim_hit",  elogs.aim_hit)
    update_callback("aim_miss",  elogs.aim_miss)

end)












local db_load = function()
    play_data.ticks_elapsed = play_data.ticks_elapsed + 1
    local get_username = readfile("evade_user.txt") ~= nil and readfile("evade_user.txt") or "unknown"
    ui.set(lua.home.label2, "ㅤ\aBBC0F3FF- \aB3B7DDE2User: \aE8E8E8FF"..get_username)
    ui.set(lua.info.label3, "Welcome \aBBC0F3FF"..get_username.." \aE8E8E8FFto Evade \aA8A8A8EE[\aFFFFFFFFgame\aB7D658FFsense\aA8A8A8EE]")
   -- play_data.seconds = ((globals.curtime() - play_data.start_time))
    --play_data.minutes = ((globals.curtime() - play_data.start_time)) / 60
    --play_data.hours = ((globals.curtime() - play_data.start_time)) / 3600
    local minute_value = (globals.curtime() % 60) - play_data.start_time % 60
    local calculate_time = (math.floor(play_data.ticks_elapsed % 128) / 127)
    if calculate_time == 1 then
        play_data.seconds = play_data.seconds + 1
        play_data.minutes = play_data.minutes + 0.0166666667
        play_data.hours = play_data.hours + 0.000277777778
    end
    if play_data.seconds >= 60 then play_data.seconds = play_data.seconds - 60 end
    if play_data.minutes >= 60 then play_data.minutes = play_data.minutes - 60 end

    ui.set(lua.home.hours, "ㅤ\aBBC0F3FF- \aE8E8E8FF"..math.floor(play_data.hours).." \aBBC0F3FFHour \aE8E8E8FF(\aBBC0F3FFs\aE8E8E8FF)")
    ui.set(lua.home.minutes, "ㅤ\aBBC0F3FF- \aE8E8E8FF"..math.floor(play_data.minutes).." \aBBC0F3FFMinute \aE8E8E8FF(\aBBC0F3FFs\aE8E8E8FF)")
    ui.set(lua.home.seconds, "ㅤ\aBBC0F3FF- \aE8E8E8FF"..math.floor(play_data.seconds).." \aBBC0F3FFSecond \aE8E8E8FF(\aBBC0F3FFs\aE8E8E8FF)")



    local total_shots = (play_data.misses + play_data.hits)

    local acc_var = math.floor((play_data.hits / total_shots) * 100)

    if total_shots == 0 then
        acc_var = 100
    end
    local get_loadtimes = database.read("evade_stats") ~= nil and database.read("evade_stats") or "unknown"
    ui.set(lua.info.times_loaded, "\aFFFFFFFF~ \aBBC0F3FFTimes Loaded: \aE8E8E8FF "..loadCount)
    ui.set(lua.info.hits, "\aFFFFFFFF~ \aBBC0F3FFHits: \aE8E8E8FF "..play_data.hits)
    ui.set(lua.info.misses, "\aFFFFFFFF~ \aBBC0F3FFMisses: \aE8E8E8FF "..play_data.misses)
    ui.set(lua.info.accuracy, "\aFFFFFFFF~ \aBBC0F3FFShot Accuracy: \aE8E8E8FF "..acc_var.."%")

    ui.set(lua.info.times_missed, "\aFFFFFFFF~ \aBBC0F3FFEnemy Misses: \aE8E8E8FF "..new_tbl.miss)
    ui.set(lua.info.times_hit, "\aFFFFFFFF~ \aBBC0F3FFEnemy Hits: \aE8E8E8FF "..new_tbl.hit)
end

local on_load = function()


    if not readfile("login_details.txt") then return end
    if string.find(login_details.web_info, readfile("login_details.txt")) then
        login_details.access = true
    end

    if login_details.is_registered == false then
        login_details.access = false
    end
end






local get_username = readfile("evade_user.txt") ~= nil and readfile("evade_user.txt") or "unknown"

if readfile("evade_user.txt") ~= nil then
    notify.new_bottom(255, 255, 255, {{"User "}, {get_username, true}, {" has successfully loaded evade"}})
else
    if readfile("hwid_management.txt") == nil then
        notify.new_bottom(255, 255, 255, { { "You have \aF3696BFFnot\aFFFFFFFF registered yet" }})
    else
        notify.new_bottom(255, 255, 255, { { "You are \aF3696BFFnot\aFFFFFFFF yet logged in" }})
    end
    
end






local cond_select = ui.new_combobox("AA", "Anti-aimbot angles", "Anti-Aim Conditions", {states[1], states[2], states[3], states[4], states[5], states[6], states[7], states[8]})
for i = 1, #states do
    antiaim[i] = {

        ovr_state = ui.new_checkbox("AA", "Anti-aimbot angles", "Override \aBBC0F3FF"..states[i].."\aE8E8E8FF Anti-Aim"),

        spacer1 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label1 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFAdjust Body Yaw"),
        spacer2 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        body_movement = ui.new_combobox("AA", "Anti-aimbot angles", "\n", {"Default", "Jitter", "Slow", "Choked", "Evade"}),
        b_yaw = ui.new_slider("AA", "Anti-aimbot angles", "Base Yaw", -100, 100, 0),
        b_rad = ui.new_slider("AA", "Anti-aimbot angles", "Radius", -50, 50, 0),
        b_delay = ui.new_slider("AA", "Anti-aimbot angles", "Speed / Delay", 1, 25, 1),

        spacer3 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label2 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFYaw Jitter"),
        spacer4 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        jitter_type = ui.new_combobox("AA", "Anti-aimbot angles", "\n", {"Off", "Offset", "Center", "Stomp"}),
        j_rad = ui.new_slider("AA", "Anti-aimbot angles", "Radius", -50, 50, 0),

        spacer5 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        label3 = ui.new_label("AA", "Anti-aimbot angles", "\aBBC0F3FF➤ \aE8E8E8FFDesync"),
        spacer6 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        desync_type = ui.new_combobox("AA", "Anti-aimbot angles", "\n", {"Gamesense", "Reversed"}),

        spacer7 = ui.new_label("AA", "Anti-aimbot angles", " \n "),
        force_def = ui.new_checkbox("AA", "Anti-aimbot angles", "Force \aBBC0F3FFDefensive \aE8E8E8FFAnti-Aim")
    }
end




local function fix_antiaim_visibility()

    local has_access = login_details.access == true
    login_details.has_access = has_access
    local when_builder = ui.get(aa_type) == "Builder" and ui.get(aa_tabs) == "Anti-Aimbot"
    local when_preset = ui.get(aa_type) == "Presets" and ui.get(aa_tabs) == "Anti-Aimbot"
    ui.set_visible(lua.preset.label1, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_preset and has_access)
    ui.set_visible(lua.preset.spacer1, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_preset and has_access)
    ui.set_visible(lua.preset.pre_type, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_preset and has_access)


    ui.set_visible(aa_tabs, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and has_access)
    ui.set_visible(aa_type, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and ui.get(aa_tabs) == "Anti-Aimbot" and has_access)
    ui.set_visible(cond_select, ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and ui.get(aa_type) == "Builder" and has_access)
    for i = 1, #states do
        local show_rad = ui.get(antiaim[i].body_movement) ~= "Default"
        local show_delay = ui.get(antiaim[i].body_movement) == "Slow" or ui.get(antiaim[i].body_movement) == "Evade"
        ui.set_visible(antiaim[i].ovr_state, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer1, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].label1, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].body_movement, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer2, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].b_yaw, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].b_rad, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and show_rad and has_access)
        ui.set_visible(antiaim[i].b_delay, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and show_delay and has_access)

        ui.set_visible(antiaim[i].spacer3, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].label2, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer4, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].jitter_type, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].j_rad, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and ui.get(antiaim[i].jitter_type) ~= "Off" and has_access)

        ui.set_visible(antiaim[i].force_def, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer7, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].desync_type, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer6, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].label3, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)
        ui.set_visible(antiaim[i].spacer5, ui.get(cond_select) == states[i] and ui.get(lua.home.manager) == "\aF48080FF⛔ \aE8E8E8FFAnti-Aimbot" and when_builder and has_access)


        ui.set_visible(lua.def.toggle, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and has_access)
        ui.set_visible(lua.def.spacer1, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.def_conds, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.ignore_fs, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.override_def, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.spacer2, ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.label1, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.spacer3, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.yaw_type, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.yaw, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) ~= "Breaker" and has_access)
        ui.set_visible(lua.def.radius, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) ~= "Spin" and ui.get(lua.def.yaw_type) ~= "Static" and ui.get(lua.def.yaw_type) ~= "Breaker" and has_access)
        ui.set_visible(lua.def.delay, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) ~= "Jitter" and ui.get(lua.def.yaw_type) ~= "Static" and ui.get(lua.def.yaw_type) ~= "Breaker" and has_access)
        ui.set_visible(lua.def.spin_radius, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) == "Spin" and has_access)
        ui.set_visible(lua.def.spin_direction, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) == "Spin" and has_access)

        ui.set_visible(lua.def.breaker_sequence, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) == "Breaker" and has_access)
        ui.set_visible(lua.def.breaker_statement1, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) == "Breaker" and has_access)
        ui.set_visible(lua.def.breaker_statement2, getcombo(lua.def.override_def, "Override Yaw") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and ui.get(lua.def.yaw_type) == "Breaker" and has_access)

        ui.set_visible(lua.def.spacer3, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.label2, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.spacer4, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.variation, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.flick_type, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.flick_rate, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access and ui.get(lua.def.flick_type) == "Custom")
        ui.set_visible(lua.def.start_degree, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.trigger_pitch, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.unpred_flick, getcombo(lua.def.override_def, "Override Pitch") and  ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.spacer5, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.label3, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.spacer6, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)
        ui.set_visible(lua.def.pause_time, getcombo(lua.def.override_def, "Override Pitch") and ui.get(lua.home.manager) == "\aFFDF62FF⚠ \aE8E8E8FFDefensive AA" and ui.get(lua.def.toggle) and has_access)


        ui.set_visible(antiaim[1].ovr_state, false)
    end




    ui.set_visible(deny_register, login_details.is_visible and login_details.is_registered == false)
    ui.set_visible(confirm_register, login_details.is_visible and login_details.is_registered == false)
    ui.set_visible(double_check_register, not login_details.is_visible and login_details.is_registered == false)
end



local function vector_angles(start_x, start_y, start_z, dest_x, dest_y, dest_z)
    local origin_x, origin_y, origin_z
    local target_x, target_y, target_z
    if dest_x == nil then
        target_x, target_y, target_z = start_x, start_y, start_z
        origin_x, origin_y, origin_z = client.eye_position()
        if origin_x == nil then
            return
        end
    else
        origin_x, origin_y, origin_z = start_x, start_y, start_z
        target_x, target_y, target_z = dest_x, dest_y, dest_z
    end

    local delta_x, delta_y, delta_z = target_x-origin_x, target_y-origin_y, target_z-origin_z

    if delta_x == 0 and delta_y == 0 then
        return 0, (delta_z > 0 and 270 or 90)
    else
        local yaw = math_deg(math_atan2(delta_y, delta_x))

        local hyp = math_sqrt(delta_x*delta_x + delta_y*delta_y)
        local pitch = math_deg(math_atan2(-delta_z, hyp))

        return pitch, yaw
    end
end


local var = {
    side,
    body_yaw = 0,
    switch = false,
    legit_aa = false,
    got_left = false,
    got_right = false,
    rollroyse = false,
    clantag_restore = false,
    ground = 0,
    mode = nil,
    anti_backstab = false,
    build = "stable"
}

local def_vars = {
    is_true = false,
    set_loop = 0,
    exp_ticks = 0,
    pitch_variation = 0,
    spin_fix = 0,
    base = 0,
    latest_duck = 0,
    current_mag_amount = 0,
    correct_mag_timer = 0,
    jitter_switch = false,

    slow_timer = 0, 

    defensive = {
        cmd = 0,
        check = 0,
        defensive = 0,
    }
}



local function keep_updt()
    def_vars.is_true = false
    if entity.get_local_player() == nil then return end
    local lp = entity.get_local_player()
    
end
local time_to_ticks = function(t)
    return math.floor(t / globals.tickinterval() + 0.5)
end

local aa_table = {
    side = 0,
    last_rand = 0,
    skitter_counter = 0,
    last_skitter = 0,
    last_count = 0,
    cycle = 0
}







local nade_alpha = 0
local animate_text = function(time, string, r, g, b, a)
    local t_out, t_out_iter = { }, 1

    local l = string:len( ) - 1

    local r_add = (255 - r)
    local g_add = (255 - g)
    local b_add = (255 - b)
    local a_add = (195 - a)

    for i = 1, #string do
        local iter = (i - 1)/(#string - 1) + time
        t_out[t_out_iter] = "\a" .. func._2hex( r + r_add * math.abs(math.cos( iter )), g + g_add * math.abs(math.cos( iter )), b + b_add * math.abs(math.cos( iter )), (a  - nade_alpha) + a_add * math.abs(math.cos( iter )) )

        t_out[t_out_iter + 1] = string:sub( i, i )

        t_out_iter = t_out_iter + 2
    end

    return t_out
end



get_player_state = function (self)

    local localplayer = entity.get_local_player()
    if not localplayer then
        return ""
    end
    local flags = entity.get_prop(localplayer, "m_fFlags");
    local weapon = entity.get_player_weapon(localplayer);
    local x, y, z = entity.get_prop(localplayer, "m_vecVelocity");
    velocity = math.sqrt(x * x + y * y + z * z);
    if not weapon then
        return "", false;
    end

    if bit.band(flags, 1) == 0 then
        var.ground = 0
    elseif var.ground <= 5 then
        var.ground = var.ground + 1
    end

    local in_air = var.ground <= 5;
    local duckamount = entity.get_prop(localplayer, "m_flDuckAmount");
    local slowmotion = ui.get(menu.slowmotion[1]) and ui.get(menu.slowmotion[2]);

    if in_air and duckamount > 0 then
        return "Air-Duck";
    elseif in_air then
        return "Air";
    elseif ui.get(menu.fakeduck) or duckamount > 0 and not in_air then
        return "Duck";
    elseif slowmotion and velocity > 20 then
        return "Slow Motion";
    elseif velocity > 20 then
        return "Running";
    else
        return "Standing";
    end
end


local function func_timer()

    def_vars.correct_mag_timer = def_vars.correct_mag_timer + 0.5
    if def_vars.correct_mag_timer < 10 and getcombo(lua.def.def_conds, "On Shot") then
        def_vars.is_true = true
    end

end


local function on_shot()
    local lp = entity.get_local_player()
    if not lp or not entity.is_alive(lp) then
        return
    end
    local weapon = entity.get_player_weapon(lp)

    def_vars.correct_mag_timer = 0
end


local function on_land()
    local lp = entity.get_local_player()
    if not lp or not entity.is_alive(lp) then
        return
    end
    local self_index = c_entity.new(lp)
    local self_anim_state = self_index:get_anim_state()
    if not self_anim_state then
        return
    end
    if self_anim_state.hit_in_ground_animation and getcombo(lua.def.def_conds, "When Landing") then
        def_vars.is_true = true
    end
end





local function on_unduck()
    local lp = entity.get_local_player()
    if not lp or not entity.is_alive(lp) then
        return
    end
    local duck_amount = entity.get_prop(lp, "m_flDuckAmount")
    local duck_diff = duck_amount - def_vars.latest_duck
    def_vars.latest_duck = duck_amount

    if duck_diff < 0 and getcombo(lua.def.def_conds, "Unduck") then
        def_vars.is_true = true
    end
end

local function get_lc(cmd)
    local lp = entity.get_local_player()
    if not lp or not entity.is_alive(lp) then
        return
    end
    local last_origin = vector(0, 0, 0)

    local origin = vector(entity.get_origin(lp))
    local breaking_lc = (last_origin - origin):length2dsqr() > 4096


    if cmd.chokedcommands == 0 then
        last_origin = origin
    end


end


local function pre_prediction_logic()
    l_dmg, r_dmg, c_dmg = 0, 0, 0

	local local_player = get_local_player()
	if local_player == nil or not entity.is_alive(local_player) then
		return
	end

	local v_origin_local = Vector3(get_prop(local_player, "m_vecAbsOrigin"))
	if v_origin_local.x == nil then
		return
	end

	local v_eye_local = Vector3(client.eye_position())
	if v_eye_local.x == nil then
		return
	end

	local players = get_all_players(true)

	local closestplayer = nil
	local pitch, yaw, roll = client.camera_angles()
	local cam_angle = Vector3(0, yaw, 0)

	local fov = 180

	for i=1, #players do
		local entindex = players[i]
		if entity_is_enemy(entindex) and entity_is_alive(entindex) and not entity_is_dormant(entindex) then
			local v_origin_enemy = Vector3(entity.get_prop(entindex, "m_vecOrigin"))
			local cur_fov = get_FOV(cam_angle, v_origin_local, v_origin_enemy)
			if cur_fov < fov then
				fov = cur_fov
				closestplayer = entindex
			end
		end
	end

	local v_origin_enemy = Vector3(entity.get_prop(closestplayer, "m_vecOrigin"))

	local at_pitch, at_yaw = vector_angles(v_origin_local.x, v_origin_local.y, v_origin_local.z, v_origin_enemy.x, v_origin_enemy.y, v_origin_enemy.z)

	cam_angle = Vector3(at_pitch, at_yaw, 0)

	if closestplayer ~= nil then
		local v_viewoffset_enemy = Vector3(entity.get_prop(closestplayer, "m_vecViewOffset"))

		local v_eye_enemy = v_origin_enemy + v_viewoffset_enemy

		local l_id, r_id, c_id = 0, 0		

		local l_add, r_add = o_scan_fineness, o_scan_fineness
		local a_left = -angle_right(cam_angle)
		local a_right = angle_right(cam_angle)

		v_left = v_eye_local + a_left * l_add
		v_right = v_eye_local + a_right * r_add
		
		local v_head_local_x, v_head_local_y, v_head_local_z = entity.hitbox_position(local_player, 0)

		c_id, c_dmg = client.trace_bullet(closestplayer, v_eye_enemy.x, v_eye_enemy.y, v_eye_enemy.z, v_head_local_x, v_head_local_y, v_head_local_z)

        --[[
		if c_dmg > 0 then
			return
		end

        ]]

		while l_dmg < 1 and l_add < o_scan_length do
			v_left = v_eye_local + a_left * l_add
			l_id, l_dmg = client.trace_bullet(closestplayer, v_eye_enemy.x, v_eye_enemy.y, v_eye_enemy.z, v_left.x , v_left.y, v_left.z)
			l_add = l_add + o_scan_fineness
		end

		while r_dmg < 1 and r_add < o_scan_length do
			v_right = v_eye_local + a_right * r_add
			r_id, r_dmg = client.trace_bullet(closestplayer, v_eye_enemy.x, v_eye_enemy.y, v_eye_enemy.z, v_right.x , v_right.y, v_right.z)
			r_add = r_add + o_scan_fineness
		end
	end

    local vals_tbl = {l_dmg, r_dmg}
    for i = 1, #vals_tbl do
        if vals_tbl[i] > 0 and getcombo(lua.def.def_conds, "Predict Visible") and c_dmg <= 0 then
            def_vars.is_true = true
        end
    end

    if c_dmg > 0 and getcombo(lua.def.def_conds, "Visible") then
        def_vars.is_true = true
    end
end


local pre = {
    tick_delay,
    switch_tick,
    switch,
    choke_hold,
    multiplier = 1.2,
    start_time = globals.realtime()

}

local lp_choke = 0

local function presets(arg)

    ui.set(menu.freestanding_body_yaw, false)


    arg.force_defensive = false
    if not not ui.get(aa_type) == "Presets" then return end
    ui.set(menu.pitch[1], "Default")

    if ui.get(lua.preset.pre_type) == "Meta Jitter" then
        ui.set(menu.yaw[2], 12)
        ui.set(menu.yaw_jitter[1], "Center")
        ui.set(menu.yaw_jitter[2], 62)
        ui.set(menu.body_yaw[1], "Jitter")
        ui.set(menu.body_yaw[2], 1)
        ui.set(menu.roll, 0)
    elseif ui.get(lua.preset.pre_type) == "Delayed" then


        arg.force_defensive = false
        local get_slowtime = (math.floor(globals.tickcount() * (globals.tickinterval() + 1))) % 16
        ui.set(menu.body_yaw[2], -90)
        if get_slowtime >= (16 / 2) then
            ui.set(menu.yaw[2], -23)
            ui.set(menu.body_yaw[2], -90)
        else if get_slowtime <= (16 / 2) then
            ui.set(menu.yaw[2], 41)
            ui.set(menu.body_yaw[2], 0)
        end
        end
        ui.set(menu.body_yaw[1], "Static")

        ui.set(menu.roll, 0)


    elseif ui.get(lua.preset.pre_type) == "Evade Special" then


        arg.force_defensive = false

        local current_time = globals.realtime()
        local r_t = (1 + math.cos((current_time - pre.start_time) * (14))) / 2
        if r_t > 0.5 then
            ui.set(menu.yaw[2], -16)
            ui.set(menu.body_yaw[2], -180)
        else
            ui.set(menu.yaw[2], 47)
            ui.set(menu.body_yaw[2], 180)
        end
        ui.set(menu.yaw_jitter[1], "Center")
        ui.set(menu.yaw_jitter[2], 0)
        ui.set(menu.body_yaw[1], "Static")
        ui.set(menu.roll, 0)
    end
end

local def_states_table = {

    "Standing",
    "Air-Duck",
    "Air",
    "Running",
    "Duck",

}
local pitch_num = {

    1,
    2,
    3
}

local pitch_str = {
    "Down",
    "Off",
    "Up"
}

client.set_event_callback("run_command", function(e)
    keep_updt()
    pre_prediction_logic()
    func_timer()

    def_vars.defensive.cmd = e.command_number
end)

local setup_defensive = {

    yaw = 0,
    body_offset = 0,
    side_counter = 0,
    side = 0,
    cycle = 0

}


client.set_event_callback("predict_command", function(e)
    if e.command_number == def_vars.defensive.cmd then
        local tickbase = entity.get_prop(entity.get_local_player(), "m_nTickBase")
        def_vars.defensive.defensive = math.abs(tickbase - def_vars.defensive.check)
        def_vars.defensive.check = math.max(tickbase, def_vars.defensive.check or 0)
        def_vars.defensive.cmd = 0
    end
end)

client.set_event_callback("level_init", function() def_vars.defensive.check, def_vars.defensive.defensive = 0, 0 end)

local unpred_timer = 0
local function defensive_logic(arg)
    local lp = entity.get_local_player()
    if not lp or not entity.is_alive(lp) then
        return
    end
    local weapon = entity.get_player_weapon(lp)
        
    if not ui.get(lua.def.toggle) then return end


    local lag_timer = entity.get_prop(lp, "m_nTickbase") % ui.get(lua.def.pause_time) == 0
    local air = bit.band(entity.get_prop(lp, "m_fFlags"), 1) == 0
    local isDefensive = (def_vars.defensive.defensive > 1 and def_vars.defensive.defensive < 14)
    local sv_tick = globals.tickcount()
    local current_time = globals.realtime()
    local pitch_variable = ((1 + math.cos((current_time - pre.start_time) * 40)) / 2) * 360
    local slow_yaw_var = ((1 + math.cos((current_time - pre.start_time) * (ui.get(lua.def.delay) * 4))) / 2) * 30

    local compensate_camera = client.camera_angles() - 360
    arg.force_defensive = false
    local view_x, view_y, roll = client.camera_angles();
    if arg.chokedcommands == 1 then
        lp_choke = lp_choke + 1 * pre.multiplier
    end
    if lp_choke > 60 then
        lp_choke = 0
    end


    if globals.chokedcommands() == 0 and setup_defensive.cycle == ui.get(lua.def.delay) then
        delayed = false
        setup_defensive.side = setup_defensive.side == 1 and 0 or 1
    end


    if ui.get(lua.def.spin_radius) > 340 then
        def_vars.spin_fix = ui.get(lua.def.spin_radius) - 23
    else
        def_vars.spin_fix = ui.get(lua.def.spin_radius)
    end
    if def_vars.set_loop <= def_vars.spin_fix then
        def_vars.set_loop = def_vars.set_loop + 1 + ui.get(lua.def.delay) * 8
    end
    if def_vars.set_loop > def_vars.spin_fix then
        def_vars.set_loop = 0
    end



    local yaw_val = (def_vars.set_loop - def_vars.spin_fix / 2)

    if ui.get(lua.def.spin_direction) == 1 then
        yaw_val = (-def_vars.set_loop + def_vars.spin_fix / 2)
    end



    if ui.get(lua.def.spin_radius) < 230 then
        def_vars.base = ui.get(lua.def.yaw)
    else
        def_vars.base = 0
    end


    for i = 1, #def_states_table do
        if get_player_state() == def_states_table[i] and getcombo(lua.def.def_conds, def_states_table[i]) == true then
            def_vars.is_true = true
        end
        if ui.get(menu.doubletap[2]) then 
            if def_vars.is_true == true and not ui.get(menu.fakeduck) then 
           
                arg.force_defensive = true



                if arg.chokedcommands > 1 then
                    arg.allow_send_packet = false
                else
                    arg.allow_send_packet = true
                end
                
                ui.set(menu.doubletap[3], "Defensive")

                if globals.tickcount() % 3 == 1 then
                    ui.set(menu.doubletap[3], "Offensive")
                end
                arg.force_defensive = globals.tickcount() % 3 ~= 1


                if ui.get(lua.def.pause_time) > 0 then
                    arg.force_defensive = false
                end
                if air and ui.get(lua.def.pause_time) > 0 then
                    
                    ui.set(menu.fakeduck, lag_timer and "Always on" or "On hotkey")
                    ui.set(menu.ragebot_toggle, false)
                    
                   -- arg.in_duck = not lag_timer
                end

                if globals.chokedcommands() == 0 then
                    if setup_defensive.cycle >= ui.get(lua.def.delay) then
                        setup_defensive.cycle = 1
                    else
                        setup_defensive.cycle = setup_defensive.cycle + 1
                    end
                end

                local current_time = globals.realtime()
                ui.set(menu.yaw_jitter[1], "Center")
                ui.set(menu.yaw_jitter[2], 0)
                ui.set(menu.body_yaw[1], "Off")
                ui.set(menu.body_yaw[2], 1)
                ui.set(menu.roll, 0)


                if ui.get(lua.def.yaw_type) == "Static" then
                    ui.set(menu.yaw[2], ui.get(lua.def.yaw))
                    ui.set(menu.yaw_jitter[2], 0)
                elseif ui.get(lua.def.yaw_type) == "Jitter" then
                    ui.set(menu.yaw[2], ui.get(lua.def.yaw))
                    ui.set(menu.yaw_jitter[1], "Center")
                    ui.set(menu.yaw_jitter[2], ui.get(lua.def.radius) * 2.5)
                    ui.set(menu.body_yaw[1], "Jitter")
                    ui.set(menu.body_yaw[2], 1)

                elseif ui.get(lua.def.yaw_type) == "Breaker" then
                    local sequence = {0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2}
                    if ui.get(lua.def.breaker_sequence) == "1 <-> 3" then
                        local sequence = {0, 2, 1, 0, 2, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2}
                    elseif ui.get(lua.def.breaker_sequence) == "1 >-< 3" then
                        local sequence = {1, 2, 0, 1, 2, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0}
                    else
                        local sequence = {0, 0, 1, 1, 2, 1, 0, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 1, 0, 0, 2, 1, 1}
                    end
                    local next_side
                    if setup_defensive.side_counter == #sequence then
                        setup_defensive.side_counter = 1
                    elseif not delayed then
                        setup_defensive.side_counter = setup_defensive.side_counter + 1
                    end
    
                    next_side = sequence[setup_defensive.side_counter]
    
                    side = next_side

    
                    if next_side == 0 then
                        setup_defensive.yaw = setup_defensive.yaw - 16 - math.abs(ui.get(lua.def.breaker_statement2)) + math.exp(math.abs(ui.get(lua.def.breaker_statement1)))
                    elseif next_side == 1 then
                        setup_defensive.yaw = setup_defensive.yaw + 16 + math.abs(ui.get(lua.def.breaker_statement2)) + math.exp(math.abs(ui.get(lua.def.breaker_statement1)))
                    end

                    --print(func.normalize(setup_defensive.yaw))






                    ui.set(menu.body_yaw[1], "Static")
                    ui.set(menu.yaw[2], func.normalize(setup_defensive.yaw))
                    ui.set(menu.yaw_jitter[2], 0)
                elseif ui.get(lua.def.yaw_type) == "Slow Jitter" then

                    if globals.chokedcommands() == 0 then
                        ui.set(menu.body_yaw[2], -90)
                        local get_slowtime = (math.floor(globals.tickcount() * (globals.tickinterval() + 1))) % (ui.get(lua.def.delay) * 4)

                        if get_slowtime >= ((ui.get(lua.def.delay) * 4) / 2) then
                            setup_defensive.yaw = (ui.get(lua.def.radius) / -1 + ui.get(lua.def.yaw))

                            ui.set(menu.body_yaw[2], 180)
                        else if get_slowtime <= (ui.get(lua.def.delay) * 4) / 2 then
                            setup_defensive.yaw = (ui.get(lua.def.radius) / 1 + ui.get(lua.def.yaw))

                            ui.set(menu.body_yaw[2], -180)
                        end
                        end
                    
                        ui.set(menu.body_yaw[1], "Static")
                        ui.set(menu.yaw[2], func.normalize(setup_defensive.yaw))
                    end




                    --[[

                    if slow_yaw_var >= 15 then
                        ui.set(menu.body_yaw[2], -60)
                        ui.set(menu.yaw[2], (ui.get(lua.def.radius) / -1 + ui.get(lua.def.yaw)))
                    else
                        ui.set(menu.body_yaw[2], 60)
                        ui.set(menu.yaw[2], (ui.get(lua.def.radius) / 1 + ui.get(lua.def.yaw)))
                    end

                    ]]


                elseif ui.get(lua.def.yaw_type) == "Spin" then
                    if isDefensive then
                        ui.set(menu.yaw[2], yaw_val + def_vars.base)
                        ui.set(menu.yaw_jitter[2], 0)
                        ui.set(menu.body_yaw[1], "Static")
                        ui.set(menu.body_yaw[2], 50)
                    end
                end







                for i = 1, #pitch_str do
                    
                    ui.set(menu.pitch[1], pitch_str[ui.get(lua.def.start_degree)])


                    local exp_delay_ticks = time_to_ticks(ui.get(lua.def.flick_rate) / 10)
                    def_vars.exp_ticks = (def_vars.exp_ticks + 1) % (exp_delay_ticks + 1)
                
                    
                    local exp_half_delay_ticks = math.floor(exp_delay_ticks / 2)
                    exp_switch = def_vars.exp_ticks < exp_half_delay_ticks
                    if def_vars.pitch_variation < 50 then
                        def_vars.pitch_variation = def_vars.pitch_variation + 2
                    end

                    if def_vars.pitch_variation >= ui.get(lua.def.variation) then
                        def_vars.pitch_variation = 0
                    end

                    if ui.get(lua.def.flick_type) == "Evade" then
                        if isDefensive then
                            ui.set(menu.pitch[1], pitch_str[ui.get(lua.def.trigger_pitch)])
                            ui.set(menu.pitch[2], 0)
                        end
                    else
                        if isDefensive then
                            if exp_switch == false and ui.get(lua.def.flick_rate) ~= 0 then
                                ui.set(menu.pitch[1], pitch_str[ui.get(lua.def.trigger_pitch)])
                                ui.set(menu.pitch[2], 0)
                            end
                        end
                    end

                    if ui.get(lua.def.unpred_flick) then
                        if isDefensive then
                            if arg.chokedcommands == 1 then
                                unpred_timer = unpred_timer + 0.25
                            end

                            if unpred_timer <= 1.25 then
                                ui.set(menu.pitch[1], "Up")
                            end

                            if unpred_timer > 8 then
                                unpred_timer = 0
                            end
                        end
                    end

                end
            end
        end 
    end


end

local function disablers()

    

    if ui.get(lua.home.fs_key) and ui.get(lua.home.fs) then
        ui.set(menu.freestand[1], ui.get(lua.home.fs))
        ui.set(menu.freestand[2], "Always on")
        ui.set(menu.doubletap[3], "Defensive")

        if def_vars.is_true == true and not ui.get(lua.def.ignore_fs) then
            ui.set(menu.pitch[1], "Down")
            ui.set(menu.yaw[2], 0)
            ui.set(menu.body_yaw[1], "Static")
            ui.set(menu.yaw_jitter[2], 0)
        end
    else
        ui.set(menu.freestand[1], false)
        ui.set(menu.freestand[2], "On hotkey")
    end



    if ui.get(lua.home.osaa_key) and ui.get(lua.home.osaa) then
        ui.set(menu.onshot[1], ui.get(lua.home.osaa))
        ui.set(menu.onshot[2], "Always on")
    else
        ui.set(menu.onshot[1], false)
        ui.set(menu.onshot[2], "On hotkey")
    end


end
local text_dst = 0
local text_spr = 8
local anim1 = 0
local scopeFrac
local scope_anim = 0

local anims = {

    dt = 0,
    osaa = 0,
    fd = 0,
    fs = 0,

}

local function indicators()
    local lp = entity.get_local_player()
    
    local screensize = { client.screen_size() }
    local center = { screensize[1] / 2, screensize[2] / 2 }
    local screen_x = center[1]
    local screen_y = center[2]
    local ss = { screensize[1] / 2, screensize[2] / 2 }
    local valid = lp ~= nil and entity.is_alive(lp)
    local scoped
    local resume_scope
    if not valid then
        return
    end
    local isCharged = anti_aim.get_double_tap()
    local local_overlap = anti_aim.get_overlap()
    local weapon = entity.get_player_weapon(lp)
    local weap_name = entity.get_classname(weapon)
    local get_build = string.upper(curr_build)
    local nade_alpha = 0

    local m_zoomLevel = entity.get_prop(weapon, 'm_zoomLevel')
    local m_bIsScoped = entity.get_prop(lp, 'm_bIsScoped') == 1
    local m_bResumeZoom = entity.get_prop(lp, 'm_bResumeZoom') == 1



    local rect_x = screen_x - 25
    local rect_y = screen_y + 31
    local rect_w = 51
    local rect_h = 4
    local rect_t = 1


    local vis_tables = {


        cols = {
            crosshair = { ui.get(lua.visuals.colpick1) },
            other = { ui.get(lua.visuals.colpick2) },
            logs = { ui.get(lua.visuals.colpick3) },

        },
        render_strings = {
            "EVADE  ",
            get_build.." ",
        },
        anims = {
    
            alpha = math.abs(1 * math.cos(2 * math.pi * globals.curtime() / 4)) * (255),
    
        },
    
        nades = {

            "CIncendiaryGrenade",
            "CHEGrenade",
            "CMolotovGrenade",
            "CSmokeGrenade",
        },

        adder = {

            dst = 0,
            spr = 10,

        }
    }





    for i = 1, #vis_tables.nades do 

        if weap_name == vis_tables.nades[i] then
            nade_alpha = 190
        end
    end
    local active_shit = {}

    active_shit[#active_shit + 1] = ui.get(menu.doubletap[2]) and {("CHARGE"), globals.tickcount() + 250, 0} or active_shit[#active_shit - 1]
    active_shit[#active_shit + 1] = ui.get(menu.freestand[2]) and {("FREE"), globals.tickcount() + 250, 0} or active_shit[#active_shit - 1]
    active_shit[#active_shit + 1] = ui.get(menu.fakeduck) and {("F-DUCK"), globals.tickcount() + 250, 0} or active_shit[#active_shit - 2]


    --active_shit[#active_shit + 1] = ui.get(menu.freestand[1]) and ui.get(menu.freestand[2]) and "FREE"
    --active_shit[#active_shit + 1] = ui.get(menu.fakeduck) and "FDUCKING"


    if ui.get(lua.visuals.crosshair) == "Basic" then

        renderer.text(screen_x - renderer.measure_text("-", vis_tables.render_strings[2]) / 2, screen_y + 25, vis_tables.cols.crosshair[1], vis_tables.cols.crosshair[2], vis_tables.cols.crosshair[3], vis_tables.cols.crosshair[4] - nade_alpha, "-c", nil, vis_tables.render_strings[1])
        renderer.text(screen_x + renderer.measure_text("-", vis_tables.render_strings[1]) / 2, screen_y + 25, 255, 255, 255, math.min(255 - nade_alpha, vis_tables.anims.alpha), "-c", nil, vis_tables.render_strings[2])
        renderer.rectangle(screen_x - 25, screen_y + 31, local_overlap * rect_w, 3, vis_tables.cols.crosshair[1], vis_tables.cols.crosshair[2], vis_tables.cols.crosshair[3], vis_tables.cols.crosshair[4] - nade_alpha - 50)

        -- Outline
        renderer.rectangle(rect_x, rect_y, rect_w - rect_t, rect_t, 45, 45, 45, 255  - nade_alpha)
        renderer.rectangle(rect_x, rect_y + rect_t, rect_t, rect_h - rect_t, 45, 45, 45, 255  - nade_alpha)
        renderer.rectangle(rect_x + rect_w - rect_t, rect_y, rect_t, rect_h - rect_t, 45, 45, 45, 255  - nade_alpha)
        renderer.rectangle(rect_x + rect_t, rect_y + rect_h - rect_t, rect_w - rect_t, rect_t, 45, 45, 45, 255  - nade_alpha)


        for i = 1, #active_shit do

            if #active_shit > 0 then

                if anim1 < 8 then
                    anim1 = anim1 + 0.5
                end
                renderer.text(screen_x + anim1, screen_y + 31 + (i * 8), 255, 255, 255, (anim1 * 31.875) - nade_alpha , "-c", nil, active_shit[i][1])
            else

                if anim1 > 0 then
                    anim1 = anim1 - 0.5
                end
                renderer.text(screen_x + anim1, screen_y + 31 + (i * 8), 255, 255, 255, (anim1 * 31.875) - nade_alpha , "-c", nil, active_shit[i][1])
            end
        end
    elseif ui.get(lua.visuals.crosshair) == "Modern" then

        local packed_text = animate_text(globals.curtime(), "  "..string.lower(vis_tables.render_strings[1])..string.lower(string.sub(vis_tables.render_strings[2], 1, (renderer.measure_text(vis_tables.render_strings[2]) - 2))), vis_tables.cols.crosshair[1], vis_tables.cols.crosshair[2], vis_tables.cols.crosshair[3], vis_tables.cols.crosshair[4] - nade_alpha)
        if m_bIsScoped then
            if scope_anim < 30 then
                scope_anim = scope_anim + 4
            end
        else
            if scope_anim > 0 then
                scope_anim = scope_anim - 4
            end
        end
        renderer.text(screen_x + scope_anim + 3, screen_y + 24, vis_tables.cols.crosshair[1], vis_tables.cols.crosshair[2], vis_tables.cols.crosshair[3], vis_tables.cols.crosshair[4] - nade_alpha, "cd", nil, "⋆゜✧*̣̩☽⋆゜⋆")
        renderer.text(screen_x + scope_anim, screen_y + 36, 255, 255, 255, 255, "cd", nil, unpack(packed_text))
        local dt_charger = isCharged and "d" or ""

        if ui.get(menu.doubletap[2]) then

            vis_tables.adder.dst = vis_tables.adder.dst + vis_tables.adder.spr
            if anims.dt < 14 then
                anims.dt = anims.dt + 1
            end

            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.dt, not isCharged and 255 or 210, isCharged and 255 or 180, 180, math.min(255 - nade_alpha, anims.dt * 17), "cd", nil, "charge"..dt_charger)

        else
            
            if anims.dt > 0 then
                anims.dt = anims.dt - 1
            end
            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.dt, not isCharged and 255 or 210, isCharged and 255 or 180, 180, math.min(255 - nade_alpha, anims.dt * 17), "cd", nil, "charge"..dt_charger)
        end

        if ui.get(menu.onshot[1]) then

            vis_tables.adder.dst = vis_tables.adder.dst + vis_tables.adder.spr
            if anims.osaa < 14 then
                anims.osaa = anims.osaa + 1
            end

            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.osaa, 255, 255, 255, math.min(255 - nade_alpha, anims.osaa * 17), "cd", nil, "osaa")

        else
            
            if anims.osaa > 0 then
                anims.osaa = anims.osaa - 1
            end
            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.osaa, 255, 255, 255, math.min(255 - nade_alpha, anims.osaa * 17), "cd", nil, "osaa")
        end

        if ui.get(menu.freestand[2]) then

            vis_tables.adder.dst = vis_tables.adder.dst + vis_tables.adder.spr
            if anims.fs < 14 then
                anims.fs = anims.fs + 1
            end

            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.fs, 255, 255, 255, math.min(255 - nade_alpha, anims.fs * 17), "cd", nil, "fs body")

        else
            
            if anims.fs > 0 then
                anims.fs = anims.fs - 1
            end
            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.fs, 255, 255, 255, math.min(255 - nade_alpha, anims.fs * 17), "cd", nil, "fs body")
        end

        if ui.get(menu.fakeduck) then

            vis_tables.adder.dst = vis_tables.adder.dst + vis_tables.adder.spr
            if anims.fd < 14 then
                anims.fd = anims.fd + 1
            end

            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.fd, 255, 255, 255, math.min(255 - nade_alpha, anims.fd * 17), "cd", nil, "duck")

        else
            
            if anims.fd > 0 then
                anims.fd = anims.fd - 1
            end
            renderer.text(screen_x + scope_anim + 3, screen_y + 50 + vis_tables.adder.dst - anims.fd, 255, 255, 255, math.min(255 - nade_alpha, anims.fd * 17), "cd", nil, "duck")
        end
    end
end

local function debug_render()


    local localplayer = entity.get_local_player()
    local screensize = { client.screen_size() }
    local center = { screensize[1] / 2, screensize[2] / 2 }
    local screen_x = center[1]
    local screen_y = center[2]
    local ss = { screensize[1] / 2, screensize[2] / 2 }
    local valid = localplayer ~= nil and entity.is_alive(localplayer)
    local scoped
    local resume_scope

    if not valid then
        return
    end

    renderer.text(screen_x - 10, screen_y + 22, 255, 255, 255, 255, "-c", nil, "")
    renderer.text(screen_x - 10, screen_y + 22, 255, 255, 255, 255, "-c", nil, "")

end
--[[
local function indicators()

    local localplayer = entity.get_local_player()
    local screensize = { client.screen_size() }
    local center = { screensize[1] / 2, screensize[2] / 2 }
    local screen_x = center[1]
    local screen_y = center[2]
    local ss = { screensize[1] / 2, screensize[2] / 2 }
    local valid = localplayer ~= nil and entity.is_alive(localplayer)
    local scoped
    local resume_scope

    if not valid then
        return
    end
    local local_overlap = anti_aim.get_overlap()

    local rect_x = screen_x - 25
    local rect_y = screen_y + 28
    local rect_w = 50
    local rect_h = 4
    local rect_t = 1

    local measure_text1 = renderer.measure_text("-c", "DESYNC DEG ")
    renderer.text(screen_x - 10, screen_y + 22, 255, 255, 255, 255, "-c", nil, "DESYNC DEG ")
    renderer.text(screen_x - 24 + measure_text1, screen_y + 22, 174, 176, 235, 255, "-c", nil, math.floor(local_overlap * 60).."."..math.random(0, 9))
    renderer.rectangle(screen_x - 25, screen_y + 28, local_overlap * rect_w, 3, 255, 255, 255, 255)

    -- Outline
    renderer.rectangle(rect_x, rect_y, rect_w - rect_t, rect_t, 30, 30, 30, 255)
    renderer.rectangle(rect_x, rect_y + rect_t, rect_t, rect_h - rect_t, 30, 30, 30, 255)
    renderer.rectangle(rect_x + rect_w - rect_t, rect_y, rect_t, rect_h - rect_t, 30, 30, 30, 255)
    renderer.rectangle(rect_x + rect_t, rect_y + rect_h - rect_t, rect_w - rect_t, rect_t, 30, 30, 30, 255)

end
]]





client.set_event_callback("aim_fire", function()

    on_shot()

end)

client.set_event_callback("pre_render", function()

    on_land()
end)


client.set_event_callback("setup_command", function(arg)

    
    ui.set(menu.fakeduck, "On hotkey")
    ui.set(menu.ragebot_toggle, true)
    get_lc(arg)
    on_unduck()
    presets(arg)
    defensive_logic(arg)
    disablers()
end)


client.set_event_callback("paint_ui", function()
    ui.set(menu.enabled, true)
    on_load()
    db_load()
    local has_access = login_details.access == true

    ui.set_visible(login_menu.no_access_msg1, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_menu.login_spacer, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_menu.user_label, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_menu.enter_user, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_menu.pass_label, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_menu.enter_pass, login_details.access == false and login_details.is_registered == true)
    ui.set_visible(login_button, login_details.access == false and login_details.is_registered == true)

    ui.set_visible(login_menu.no_register_label, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.register_spacer1, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.user_label2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.enter_user2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.pass_label2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.enter_pass2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.key_label2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(login_menu.key_pass2, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(import_key, login_details.access == false and login_details.is_registered == false)
    ui.set_visible(register_spacer2, login_details.access == false and login_details.is_registered == false)

    --ui.set_visible(no_access_msg2, get_access() == false)
    indicators()

    fix_antiaim_visibility()

    ui.set_visible(menu.fakepeek[1], false);
    ui.set_visible(menu.fakepeek[2], false);
    ui.set_visible(menu.legmovement, false);
    ui.set_visible(menu.slowmotion[1], false);
    ui.set_visible(menu.slowmotion[2], false);
    ui.set_visible(menu.onshot[1], false);
    ui.set_visible(menu.onshot[2], false);
    ui.set_visible(menu.enabled, false);
    ui.set_visible(menu.pitch[1], false);
    ui.set_visible(menu.pitch[2], false);
    ui.set_visible(menu.yaw_base, false);
    ui.set_visible(menu.yaw[1], false);
    ui.set_visible(menu.yaw[2], false);
    ui.set_visible(menu.yaw_jitter[1], false);
    ui.set_visible(menu.yaw_jitter[2], false);
    ui.set_visible(menu.body_yaw[1], false);
    ui.set_visible(menu.body_yaw[2], false);
    ui.set_visible(menu.freestanding_body_yaw, false);
    ui.set_visible(menu.edge_yaw, false);
    ui.set_visible(menu.freestand[1], false);
    ui.set_visible(menu.freestand[2], false);
    ui.set_visible(menu.roll, false);
    ui.set_visible(menu.fakelag_limit, true);

    ui.set_visible(lua.home.label1, has_access)
    ui.set_visible(lua.home.manager, has_access)
    ui.set_visible(lua.home.label2, has_access)
    ui.set_visible(lua.home.label3, has_access)
    ui.set_visible(lua.home.fs, has_access)
    ui.set_visible(lua.home.fs_key, has_access)
    ui.set_visible(lua.home.osaa, has_access)
    ui.set_visible(lua.home.osaa_key, has_access)
    ui.set_visible(lua.home.label4, has_access)
    ui.set_visible(lua.home.hours, has_access)
    ui.set_visible(lua.home.minutes, has_access)
    ui.set_visible(lua.home.seconds, has_access)
    ui.set_visible(lua.home.spacer3, has_access)

    ui.set_visible(lua.info.label1, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label2, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label3, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label4, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label5, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label6, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label7, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label8, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label9, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.label10, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.reset_login, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.get_discord, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.statistics, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.spacer1, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.accuracy, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.misses, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.hits, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)

    ui.set_visible(lua.info.times_missed, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.times_hit, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)

    ui.set_visible(lua.info.times_loaded, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)
    ui.set_visible(lua.info.spacer2, ui.get(lua.home.manager) == "\aBBC0F3FF❓ \aE8E8E8FFInfo" and has_access)



    ui.set_visible(lua.visuals.spacer1,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)
    ui.set_visible(lua.visuals.spacer2,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)
    ui.set_visible(lua.visuals.spacer3,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)
    ui.set_visible(lua.visuals.spacer4,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)
    ui.set_visible(lua.visuals.spacer5,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)
    ui.set_visible(lua.visuals.spacer6,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and has_access)


    ui.set_visible(lua.visuals.toggle,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals")
    ui.set_visible(lua.visuals.label1,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.label2,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.label3,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.colpick1,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.colpick2,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.colpick3,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.crosshair,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.other,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
    ui.set_visible(lua.visuals.logs,ui.get(lua.home.manager) == "\aBBC0F3FF✎ \aE8E8E8FFVisuals" and ui.get(lua.visuals.toggle) and has_access)
end)



